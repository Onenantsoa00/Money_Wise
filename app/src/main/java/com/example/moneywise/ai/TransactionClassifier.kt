package com.example.moneywise.ai

import android.content.Context
import android.util.Log
import javax.inject.Inject
import javax.inject.Singleton

/**
 * Classe pour repr√©senter le r√©sultat d'une classification avec confiance
 */
data class TransactionClassification(
    val type: String,
    val confidence: Double
)

@Singleton
class TransactionClassifier @Inject constructor(
    private val context: Context
) {
    companion object {
        private const val TAG = "TransactionClassifier"

        /**
         * Factory method pour cr√©er une instance sans injection Hilt
         */
        fun create(context: Context): TransactionClassifier {
            return TransactionClassifier(context)
        }
    }

    // Base de donn√©es de patterns pour la classification - AM√âLIOR√âE
    private val transactionPatterns = mapOf(
        "DEPOT" to listOf(
            // Fran√ßais
            "re√ßu", "cr√©dit", "d√©p√¥t", "versement", "recharg√©", "ajout√©", "cr√©dit√©",
            "vous avez re√ßu", "votre compte a √©t√© cr√©dit√©", "versement effectu√©",
            "recharge", "depot", "credit",
            // Anglais
            "received", "credit", "deposit", "credited", "added", "topped up",
            "you have received", "your account has been credited"
        ),
        "RETRAIT" to listOf(
            // Fran√ßais - PATTERNS AM√âLIOR√âS POUR VOTRE CAS
            "envoy√©", "envoye", "d√©bit", "retrait", "retir√©", "pay√©", "d√©bit√©", "pr√©lev√©",
            "vous avez envoy√©", "votre compte a √©t√© d√©bit√©", "paiement effectu√©",
            "envoye a", "envoy√© √†", "paiement", "retrait",
            // Anglais
            "sent", "debit", "withdrawal", "withdrawn", "paid", "debited",
            "you have sent", "your account has been debited", "payment made"
        ),
        "TRANSFERT" to listOf(
            // Fran√ßais
            "transfert", "envoi", "transf√©r√©", "virement", "transfer",
            "transfert effectu√©", "envoi d'argent", "virement bancaire",
            // Anglais
            "transfer", "money transfer", "fund transfer", "transferred"
        ),
        "ACHAT" to listOf(
            // Fran√ßais
            "achat", "achet√©", "commande", "facture", "paiement marchand",
            "achat effectu√©", "paiement boutique", "transaction commerciale",
            // Anglais
            "purchase", "bought", "order", "invoice", "merchant payment",
            "purchase made", "shop payment", "commercial transaction"
        ),
        "FRAIS" to listOf(
            // Fran√ßais - PATTERNS PLUS SP√âCIFIQUES
            "frais de transaction", "commission bancaire", "frais de service",
            "commission", "taxe", "charge", "co√ªt de service",
            // Anglais
            "transaction fee", "bank commission", "service charge",
            "fee", "commission", "tax", "charge", "cost"
        )
    )

    // Patterns sp√©cifiques par op√©rateur - AM√âLIOR√âS
    private val operatorSpecificPatterns = mapOf(
        "mvola" to mapOf(
            "DEPOT" to listOf("mvola re√ßu", "compte mvola cr√©dit√©", "d√©p√¥t mvola", "recharge mvola"),
            "RETRAIT" to listOf("mvola envoy√©", "retrait mvola", "paiement mvola", "envoye a", "envoy√© √†"),
            "TRANSFERT" to listOf("transfert mvola", "envoi mvola")
        ),
        "airtel" to mapOf(
            "DEPOT" to listOf("airtel money received", "airtel credit", "airtel deposit"),
            "RETRAIT" to listOf("airtel money sent", "airtel withdrawal", "airtel payment", "sent to"),
            "TRANSFERT" to listOf("airtel transfer", "airtel money transfer")
        ),
        "orange" to mapOf(
            "DEPOT" to listOf("orange money re√ßu", "cr√©dit orange", "d√©p√¥t orange"),
            "RETRAIT" to listOf("orange money envoy√©", "retrait orange", "paiement orange", "envoy√© √†"),
            "TRANSFERT" to listOf("transfert orange", "envoi orange money")
        )
    )

    /**
     * Classifie une transaction bas√©e sur le texte du SMS
     */
    fun classifyTransaction(text: String, sender: String = ""): String {
        Log.d(TAG, "Classifying transaction: $text")

        val textLower = text.lowercase()
        val operator = getOperatorFromSender(sender)

        // üî• LOGIQUE SP√âCIALE POUR LES MESSAGES MVOLA COMME LE V√îTRE
        if (operator == "mvola" && textLower.contains("envoye a")) {
            Log.d(TAG, "Detected MVola 'envoye a' pattern - classifying as RETRAIT")
            return "RETRAIT"
        }

        // V√©rifier d'abord les patterns sp√©cifiques √† l'op√©rateur
        if (operator != "unknown") {
            val operatorPatterns = operatorSpecificPatterns[operator]
            operatorPatterns?.forEach { (type, patterns) ->
                if (patterns.any { textLower.contains(it) }) {
                    Log.d(TAG, "Classified as $type (operator-specific)")
                    return type
                }
            }
        }

        // Ensuite, v√©rifier les patterns g√©n√©raux avec scoring am√©lior√©
        val scores = mutableMapOf<String, Double>()

        transactionPatterns.forEach { (type, patterns) ->
            var score = 0.0
            patterns.forEach { pattern ->
                if (textLower.contains(pattern)) {
                    // Score plus √©lev√© pour les patterns plus sp√©cifiques
                    score += when (pattern.length) {
                        in 1..5 -> 1.0
                        in 6..10 -> 2.0
                        in 11..20 -> 3.0
                        else -> 4.0
                    }
                }
            }
            if (score > 0) {
                scores[type] = score
            }
        }

        // üî• LOGIQUE SP√âCIALE: Si on d√©tecte "frais" ET "envoy√©", privil√©gier RETRAIT
        if (scores.containsKey("FRAIS") && scores.containsKey("RETRAIT")) {
            if (textLower.contains("envoye") || textLower.contains("envoy√©")) {
                Log.d(TAG, "Detected both FRAIS and RETRAIT patterns, but 'envoy√©' found - prioritizing RETRAIT")
                return "RETRAIT"
            }
        }

        // Retourner le type avec le score le plus √©lev√©
        val bestMatch = scores.maxByOrNull { it.value }
        val result = bestMatch?.key ?: "AUTRE"

        Log.d(TAG, "Classification scores: $scores")
        Log.d(TAG, "Final classification: $result")

        return result
    }

    /**
     * Classifie une transaction avec un score de confiance
     */
    fun classifyTransactionWithConfidence(text: String, sender: String = ""): TransactionClassification {
        val textLower = text.lowercase()
        val operator = getOperatorFromSender(sender)

        val scores = mutableMapOf<String, Double>()
        var maxScore = 0.0

        // üî• LOGIQUE SP√âCIALE POUR MVOLA "envoye a"
        if (operator == "mvola" && textLower.contains("envoye a")) {
            Log.d(TAG, "MVola 'envoye a' detected - high confidence RETRAIT")
            return TransactionClassification("RETRAIT", 0.95)
        }

        // V√©rifier les patterns sp√©cifiques √† l'op√©rateur (bonus de confiance)
        if (operator != "unknown") {
            val operatorPatterns = operatorSpecificPatterns[operator]
            operatorPatterns?.forEach { (type, patterns) ->
                patterns.forEach { pattern ->
                    if (textLower.contains(pattern)) {
                        scores[type] = (scores[type] ?: 0.0) + 5.0 // Bonus pour patterns sp√©cifiques
                    }
                }
            }
        }

        // V√©rifier les patterns g√©n√©raux
        transactionPatterns.forEach { (type, patterns) ->
            patterns.forEach { pattern ->
                if (textLower.contains(pattern)) {
                    val patternScore = when (pattern.length) {
                        in 1..5 -> 1.0
                        in 6..10 -> 2.0
                        in 11..20 -> 3.0
                        else -> 4.0
                    }
                    scores[type] = (scores[type] ?: 0.0) + patternScore
                }
            }
        }

        // üî• LOGIQUE SP√âCIALE: Privil√©gier RETRAIT si "envoy√©" + "frais"
        if (scores.containsKey("FRAIS") && scores.containsKey("RETRAIT")) {
            if (textLower.contains("envoye") || textLower.contains("envoy√©")) {
                scores["RETRAIT"] = (scores["RETRAIT"] ?: 0.0) + 10.0 // Bonus √©norme
                Log.d(TAG, "Boosting RETRAIT score due to 'envoy√©' pattern")
            }
        }

        // Calculer le score total et la confiance
        val totalScore = scores.values.sum()
        maxScore = scores.values.maxOrNull() ?: 0.0

        val bestType = scores.maxByOrNull { it.value }?.key ?: "AUTRE"
        val confidence = if (totalScore > 0) maxScore / totalScore else 0.0

        Log.d(TAG, "Classification with confidence: $bestType ($confidence)")

        return TransactionClassification(bestType, confidence)
    }

    private fun getOperatorFromSender(sender: String): String {
        val senderLower = sender.lowercase()
        return when {
            senderLower.contains("mvola") || senderLower.contains("telma") -> "mvola"
            senderLower.contains("airtel") -> "airtel"
            senderLower.contains("orange") -> "orange"
            else -> "unknown"
        }
    }

    /**
     * Obtient des statistiques sur les classifications
     */
    fun getClassificationStats(): Map<String, Int> {
        return mapOf(
            "DEPOT" to (transactionPatterns["DEPOT"]?.size ?: 0),
            "RETRAIT" to (transactionPatterns["RETRAIT"]?.size ?: 0),
            "TRANSFERT" to (transactionPatterns["TRANSFERT"]?.size ?: 0),
            "ACHAT" to (transactionPatterns["ACHAT"]?.size ?: 0),
            "FRAIS" to (transactionPatterns["FRAIS"]?.size ?: 0)
        )
    }
}
