package com.example.moneywise.utils

import android.app.NotificationManager
import android.app.PendingIntent
import android.content.Context
import android.content.Intent
import android.content.pm.PackageManager
import android.media.AudioAttributes
import android.media.MediaPlayer
import android.net.Uri
import android.os.Build
import android.util.Log
import androidx.core.app.ActivityCompat
import androidx.core.app.NotificationCompat
import androidx.core.app.NotificationManagerCompat
import com.example.moneywise.MainActivity
import com.example.moneywise.R
import dagger.hilt.android.qualifiers.ApplicationContext
import javax.inject.Inject
import javax.inject.Singleton

@Singleton
class NotificationHelper @Inject constructor(
    @ApplicationContext private val context: Context
) {

    companion object {
        private const val TAG = "NotificationHelper"
        private const val CHANNEL_ID = "reminder_channel"
    }

    private var mediaPlayer: MediaPlayer? = null

    fun sendNotification(
        id: Int,
        title: String,
        message: String,
        priority: Int = NotificationCompat.PRIORITY_DEFAULT,
        playSound: Boolean = true
    ) {
        // V√©rifier les permissions pour Android 13+
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU) {
            if (ActivityCompat.checkSelfPermission(
                    context,
                    android.Manifest.permission.POST_NOTIFICATIONS
                ) != PackageManager.PERMISSION_GRANTED
            ) {
                Log.w(TAG, "‚ùå Permission de notification non accord√©e")
                return
            }
        }

        val intent = Intent(context, MainActivity::class.java).apply {
            flags = Intent.FLAG_ACTIVITY_NEW_TASK or Intent.FLAG_ACTIVITY_CLEAR_TOP
        }

        val pendingIntent = PendingIntent.getActivity(
            context, id, intent,
            PendingIntent.FLAG_UPDATE_CURRENT or PendingIntent.FLAG_IMMUTABLE
        )

        val notification = NotificationCompat.Builder(context, CHANNEL_ID)
            .setContentTitle(title)
            .setContentText(message)
            .setSmallIcon(R.drawable.ic_notifications)
            .setContentIntent(pendingIntent)
            .setPriority(priority)
            .setAutoCancel(true)
            .setStyle(NotificationCompat.BigTextStyle().bigText(message))
            .build()

        try {
            NotificationManagerCompat.from(context).notify(id, notification)
            Log.d(TAG, "‚úÖ Notification envoy√©e: $title")

            // Jouer le son de pi√®ce d'argent
            if (playSound) {
                playCoinDropSound()
            }
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Erreur lors de l'envoi de la notification: ${e.message}")
        }
    }

    /**
     * Joue le son de pi√®ce d'argent qui tombe
     */
    private fun playCoinDropSound() {
        try {
            // Lib√©rer le MediaPlayer pr√©c√©dent s'il existe
            mediaPlayer?.release()

            // Cr√©er un nouveau MediaPlayer
            mediaPlayer = MediaPlayer.create(context, R.raw.coin_drop)

            if (mediaPlayer != null) {
                // Configurer les attributs audio
                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
                    val audioAttributes = AudioAttributes.Builder()
                        .setUsage(AudioAttributes.USAGE_NOTIFICATION)
                        .setContentType(AudioAttributes.CONTENT_TYPE_SONIFICATION)
                        .build()
                    mediaPlayer?.setAudioAttributes(audioAttributes)
                }

                // Configurer le listener pour lib√©rer les ressources apr√®s lecture
                mediaPlayer?.setOnCompletionListener { mp ->
                    mp.release()
                    mediaPlayer = null
                    Log.d(TAG, "üîä Son de pi√®ce termin√© et ressources lib√©r√©es")
                }

                // Configurer le listener d'erreur
                mediaPlayer?.setOnErrorListener { mp, what, extra ->
                    Log.e(TAG, "‚ùå Erreur MediaPlayer: what=$what, extra=$extra")
                    mp.release()
                    mediaPlayer = null
                    true
                }

                // D√©marrer la lecture
                mediaPlayer?.start()
                Log.d(TAG, "ü™ô Son de pi√®ce d'argent jou√©")
            } else {
                Log.w(TAG, "‚ö†Ô∏è Impossible de cr√©er MediaPlayer pour le son")
            }
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Erreur lors de la lecture du son: ${e.message}")
            mediaPlayer?.release()
            mediaPlayer = null
        }
    }

    fun hasNotificationPermission(): Boolean {
        return if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU) {
            ActivityCompat.checkSelfPermission(
                context,
                android.Manifest.permission.POST_NOTIFICATIONS
            ) == PackageManager.PERMISSION_GRANTED
        } else {
            true
        }
    }

    /**
     * Lib√®re les ressources du MediaPlayer
     */
    fun release() {
        try {
            mediaPlayer?.release()
            mediaPlayer = null
            Log.d(TAG, "üîá Ressources MediaPlayer lib√©r√©es")
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Erreur lors de la lib√©ration des ressources: ${e.message}")
        }
    }
}
