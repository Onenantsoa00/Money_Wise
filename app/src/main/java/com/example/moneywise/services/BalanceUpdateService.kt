package com.example.moneywise.services

import android.content.Context
import android.util.Log
import com.example.moneywise.data.AppDatabase
import com.example.moneywise.data.entity.Utilisateur
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.withContext
import javax.inject.Inject
import javax.inject.Singleton

@Singleton
class BalanceUpdateService @Inject constructor() {

    companion object {
        private const val TAG = "BalanceUpdateService"

        /**
         * Factory method pour cr√©er une instance sans injection Hilt
         */
        fun create(): BalanceUpdateService {
            return BalanceUpdateService()
        }
    }

    /**
     * Met √† jour le solde de l'utilisateur en fonction du type de transaction
     * @param context Le contexte de l'application
     * @param userId L'ID de l'utilisateur
     * @param transactionType Le type de transaction (DEPOT, RETRAIT, TRANSFERT, etc.)
     * @param amount Le montant de la transaction
     * @return true si la mise √† jour a r√©ussi, false sinon
     */
    suspend fun updateUserBalance(
        context: Context,
        userId: Int,
        transactionType: String,
        amount: Double
    ): Boolean = withContext(Dispatchers.IO) {
        try {
            Log.d(TAG, "üîÑ D√©but mise √† jour solde: userId=$userId, type=$transactionType, amount=$amount")

            val db = AppDatabase.getDatabase(context)
            val utilisateurDao = db.utilisateurDao()

            // üî• UTILISATION DES M√âTHODES EXISTANTES DE VOTRE DAO
            val user = utilisateurDao.getUserById(userId) ?: utilisateurDao.getFirstUtilisateur()

            if (user == null) {
                Log.e(TAG, "‚ùå Utilisateur non trouv√© avec ID: $userId")
                return@withContext false
            }

            Log.d(TAG, "üë§ Utilisateur trouv√©: ${user.nom} ${user.prenom}, solde actuel: ${user.solde}")

            // Calculer le nouveau solde
            val newBalance = calculateNewBalance(user.solde, transactionType, amount)

            // V√©rifier que le nouveau solde est valide
            if (newBalance < 0 && transactionType.uppercase() in listOf("RETRAIT", "DEBIT", "ENVOYE", "PAIEMENT", "TRANSFERT")) {
                Log.w(TAG, "‚ö†Ô∏è Attention: Le nouveau solde sera n√©gatif ($newBalance)")
                // On continue quand m√™me car certains comptes peuvent √™tre en d√©couvert
            }

            // üî• UTILISATION DE VOTRE M√âTHODE updateBalance EXISTANTE
            utilisateurDao.updateBalance(userId, newBalance)

            Log.d(TAG, "‚úÖ Solde mis √† jour avec succ√®s: ${user.solde} -> $newBalance (${transactionType}: $amount)")
            return@withContext true

        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Erreur lors de la mise √† jour du solde: ${e.message}", e)
            return@withContext false
        }
    }

    /**
     * üî• AM√âLIORATION: Calcule le nouveau solde en fonction du type de transaction avec plus de pr√©cision
     */
    private fun calculateNewBalance(currentBalance: Double, transactionType: String, amount: Double): Double {
        val type = transactionType.uppercase().trim()

        Log.d(TAG, "üí∞ Calcul nouveau solde: $currentBalance + ($type: $amount)")

        return when (type) {
            // üî• D√âP√îTS - Argent qui ENTRE dans le compte
            "DEPOT", "D√âP√îT", "CREDIT", "CR√âDIT", "RECU", "RE√áU",
            "VERSEMENT", "RECHARGE", "RECHARG√â", "AJOUT√â", "CR√âDIT√â" -> {
                Log.d(TAG, "üíµ Type DEPOT d√©tect√© - Ajout de $amount")
                currentBalance + amount
            }

            // üî• RETRAITS - Argent qui SORT du compte
            "RETRAIT", "DEBIT", "D√âBIT", "ENVOYE", "ENVOY√â",
            "PAIEMENT", "PAY√â", "D√âBIT√â", "PR√âLEV√â", "RETIR√â" -> {
                Log.d(TAG, "üí∏ Type RETRAIT d√©tect√© - Soustraction de $amount")
                currentBalance - amount
            }

            // üî• TRANSFERTS - Peut √™tre entrant ou sortant selon le contexte
            "TRANSFERT", "TRANSFER", "ENVOI", "VIREMENT" -> {
                Log.d(TAG, "üîÑ Type TRANSFERT d√©tect√© - Soustraction de $amount (par d√©faut)")
                // Par d√©faut, on consid√®re un transfert comme une sortie
                // Cette logique peut √™tre affin√©e selon le contexte du message
                currentBalance - amount
            }

            // üî• ACHATS - Argent qui sort
            "ACHAT", "ACHET√â", "COMMANDE", "FACTURE", "PURCHASE" -> {
                Log.d(TAG, "üõí Type ACHAT d√©tect√© - Soustraction de $amount")
                currentBalance - amount
            }

            // üî• TYPES SP√âCIAUX
            "FRAIS", "COMMISSION", "FEE" -> {
                Log.d(TAG, "üí≥ Type FRAIS d√©tect√© - Soustraction de $amount")
                currentBalance - amount
            }

            "REMBOURSEMENT", "REFUND" -> {
                Log.d(TAG, "üí∞ Type REMBOURSEMENT d√©tect√© - Ajout de $amount")
                currentBalance + amount
            }

            else -> {
                Log.w(TAG, "‚ö†Ô∏è Type de transaction non reconnu: '$type' - Aucun changement de solde")
                currentBalance // Pas de changement pour les types inconnus
            }
        }
    }

    /**
     * üî• AM√âLIORATION: Recalcule le solde total bas√© sur toutes les transactions
     * UTILISE VOS M√âTHODES DAO EXISTANTES
     */
    suspend fun recalculateBalance(context: Context, userId: Int): Double = withContext(Dispatchers.IO) {
        try {
            Log.d(TAG, "üîÑ D√©but recalcul complet du solde pour userId: $userId")

            val db = AppDatabase.getDatabase(context)
            val transactionDao = db.transactionDao()
            val utilisateurDao = db.utilisateurDao()

            // üî• UTILISATION DE VOTRE M√âTHODE getTransactionsByUserId EXISTANTE
            val transactions = transactionDao.getTransactionsByUserId(userId)

            Log.d(TAG, "üìä ${transactions.size} transactions trouv√©es pour l'utilisateur $userId")

            // Calculer le solde total en partant de 0
            var totalBalance = 0.0
            var transactionCount = 0

            transactions.forEach { transaction ->
                val amount = try {
                    transaction.montants.replace(",", ".").replace("\\s".toRegex(), "").toDouble()
                } catch (e: NumberFormatException) {
                    Log.w(TAG, "‚ö†Ô∏è Montant invalide dans transaction ${transaction.id}: '${transaction.montants}'")
                    0.0
                }

                if (amount > 0) {
                    val oldBalance = totalBalance
                    totalBalance = calculateNewBalance(totalBalance, transaction.type, amount)
                    transactionCount++

                    Log.d(TAG, "üìù Transaction ${transaction.id}: ${transaction.type} $amount -> Solde: $oldBalance -> $totalBalance")
                }
            }

            Log.d(TAG, "üí∞ Solde final calcul√©: $totalBalance (bas√© sur $transactionCount transactions)")

            // üî• UTILISATION DE VOTRE M√âTHODE updateBalance EXISTANTE
            utilisateurDao.updateBalance(userId, totalBalance)
            Log.d(TAG, "‚úÖ Solde utilisateur mis √† jour √†: $totalBalance")

            return@withContext totalBalance

        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Erreur lors du recalcul du solde: ${e.message}", e)
            return@withContext 0.0
        }
    }

    /**
     * üî• NOUVELLE M√âTHODE: V√©rifie la coh√©rence du solde
     * UTILISE VOS M√âTHODES DAO EXISTANTES
     */
    suspend fun validateBalance(context: Context, userId: Int): Boolean = withContext(Dispatchers.IO) {
        try {
            val db = AppDatabase.getDatabase(context)
            val utilisateurDao = db.utilisateurDao()

            // R√©cup√©rer le solde actuel avec vos m√©thodes existantes
            val user = utilisateurDao.getUserById(userId) ?: utilisateurDao.getFirstUtilisateur()
            val currentBalance = user?.solde ?: 0.0

            // Recalculer le solde th√©orique
            val calculatedBalance = recalculateBalance(context, userId)

            // Comparer avec une tol√©rance de 0.01 pour les erreurs d'arrondi
            val isValid = kotlin.math.abs(currentBalance - calculatedBalance) < 0.01

            if (!isValid) {
                Log.w(TAG, "‚ö†Ô∏è Incoh√©rence d√©tect√©e - Solde actuel: $currentBalance, Calcul√©: $calculatedBalance")
            } else {
                Log.d(TAG, "‚úÖ Solde coh√©rent: $currentBalance")
            }

            return@withContext isValid

        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Erreur lors de la validation du solde: ${e.message}", e)
            return@withContext false
        }
    }

    /**
     * üî• NOUVELLE M√âTHODE: Obtient le solde actuel de l'utilisateur
     * UTILISE VOS M√âTHODES DAO EXISTANTES
     */
    suspend fun getCurrentBalance(context: Context, userId: Int): Double = withContext(Dispatchers.IO) {
        try {
            val db = AppDatabase.getDatabase(context)
            val utilisateurDao = db.utilisateurDao()

            val user = utilisateurDao.getUserById(userId) ?: utilisateurDao.getFirstUtilisateur()
            val balance = user?.solde ?: 0.0

            Log.d(TAG, "üí∞ Solde actuel pour userId $userId: $balance")
            return@withContext balance

        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Erreur lors de la r√©cup√©ration du solde: ${e.message}", e)
            return@withContext 0.0
        }
    }

    /**
     * üî• NOUVELLE M√âTHODE: R√©initialise le solde √† une valeur sp√©cifique
     * UTILISE VOS M√âTHODES DAO EXISTANTES
     */
    suspend fun resetBalance(context: Context, userId: Int, newBalance: Double): Boolean = withContext(Dispatchers.IO) {
        try {
            Log.d(TAG, "üîÑ R√©initialisation du solde pour userId $userId √† $newBalance")

            val db = AppDatabase.getDatabase(context)
            val utilisateurDao = db.utilisateurDao()

            // üî• UTILISATION DE VOTRE M√âTHODE updateBalance EXISTANTE
            utilisateurDao.updateBalance(userId, newBalance)
            Log.d(TAG, "‚úÖ Solde r√©initialis√© √†: $newBalance")
            return@withContext true

        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Erreur lors de la r√©initialisation du solde: ${e.message}", e)
            return@withContext false
        }
    }

    /**
     * üî• NOUVELLE M√âTHODE: Utilise vos m√©thodes addToBalance et subtractFromBalance existantes
     */
    suspend fun updateBalanceDirectly(
        context: Context,
        userId: Int,
        transactionType: String,
        amount: Double
    ): Boolean = withContext(Dispatchers.IO) {
        try {
            Log.d(TAG, "üîÑ Mise √† jour directe du solde: userId=$userId, type=$transactionType, amount=$amount")

            val db = AppDatabase.getDatabase(context)
            val utilisateurDao = db.utilisateurDao()

            val type = transactionType.uppercase().trim()

            when (type) {
                "DEPOT", "D√âP√îT", "CREDIT", "CR√âDIT", "RECU", "RE√áU",
                "VERSEMENT", "RECHARGE", "RECHARG√â", "AJOUT√â", "CR√âDIT√â",
                "REMBOURSEMENT", "REFUND" -> {
                    // üî• UTILISATION DE VOTRE M√âTHODE addToBalance EXISTANTE
                    utilisateurDao.addToBalance(userId, amount)
                    Log.d(TAG, "‚úÖ Ajout de $amount au solde")
                }

                "RETRAIT", "DEBIT", "D√âBIT", "ENVOYE", "ENVOY√â",
                "PAIEMENT", "PAY√â", "D√âBIT√â", "PR√âLEV√â", "RETIR√â",
                "TRANSFERT", "TRANSFER", "ENVOI", "VIREMENT",
                "ACHAT", "ACHET√â", "COMMANDE", "FACTURE", "PURCHASE",
                "FRAIS", "COMMISSION", "FEE" -> {
                    // üî• UTILISATION DE VOTRE M√âTHODE subtractFromBalance EXISTANTE
                    utilisateurDao.subtractFromBalance(userId, amount)
                    Log.d(TAG, "‚úÖ Soustraction de $amount du solde")
                }

                else -> {
                    Log.w(TAG, "‚ö†Ô∏è Type de transaction non reconnu: '$type' - Aucune modification")
                    return@withContext false
                }
            }

            return@withContext true

        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Erreur lors de la mise √† jour directe du solde: ${e.message}", e)
            return@withContext false
        }
    }
}
