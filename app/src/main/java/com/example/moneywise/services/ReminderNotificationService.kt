package com.example.moneywise.services

import android.app.AlarmManager
import android.app.PendingIntent
import android.app.Service
import android.content.Context
import android.content.Intent
import android.os.Build
import android.os.IBinder
import android.os.SystemClock
import android.util.Log
import androidx.core.app.NotificationCompat
import com.example.moneywise.R
import com.example.moneywise.data.AppDatabase
import com.example.moneywise.data.entity.Acquittement
import com.example.moneywise.data.entity.Emprunt
import com.example.moneywise.data.entity.Projet
import com.example.moneywise.utils.NotificationChannelManager
import com.example.moneywise.utils.NotificationHelper
import com.example.moneywise.utils.ReminderManager
import dagger.hilt.android.AndroidEntryPoint
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.Job
import kotlinx.coroutines.cancel
import kotlinx.coroutines.launch
import kotlinx.coroutines.withContext
import javax.inject.Inject

@AndroidEntryPoint
class ReminderNotificationService : Service() {

    @Inject
    lateinit var db: AppDatabase

    @Inject
    lateinit var notificationHelper: NotificationHelper

    @Inject
    lateinit var reminderManager: ReminderManager

    @Inject
    lateinit var notificationChannelManager: NotificationChannelManager

    private val serviceScope = CoroutineScope(Dispatchers.IO + Job())
    private val alarmManager by lazy { getSystemService(Context.ALARM_SERVICE) as AlarmManager }

    companion object {
        private const val TAG = "ReminderNotificationService"
        private const val NOTIFICATION_ID = 2001
        private const val REQUEST_CODE = 1234

        // IDs pour diff√©rents types de notifications
        private const val EMPRUNT_NOTIFICATION_ID = 3001
        private const val ACQUITTEMENT_NOTIFICATION_ID = 3002
        private const val PROJET_NOTIFICATION_ID = 3003
        private const val TEST_NOTIFICATION_ID = 3000
        private const val GENERAL_NOTIFICATION_ID = 3004

        // Constantes d'intervalles pour √©viter les erreurs de r√©f√©rence
        private const val FIFTEEN_SECONDS = 15 * 1000L
        private const val THREE_HOURS = 3 * 60 * 60 * 1000L
        private const val SIX_HOURS = 6 * 60 * 60 * 1000L
        private const val TWELVE_HOURS = 12 * 60 * 60 * 1000L
        private const val ONE_DAY = 24 * 60 * 60 * 1000L
    }

    override fun onBind(intent: Intent?): IBinder? = null

    override fun onCreate() {
        super.onCreate()
        Log.d(TAG, "üöÄ Service de rappel cr√©√©")

        // Cr√©er les canaux de notification
        notificationChannelManager.createReminderChannel()
        notificationChannelManager.createFloatingWidgetChannel()
    }

    override fun onStartCommand(intent: Intent?, flags: Int, startId: Int): Int {
        Log.d(TAG, "üîÑ Service de rappel d√©marr√©")

        // V√©rifier si les rappels sont activ√©s
        if (!reminderManager.areRemindersEnabled()) {
            Log.d(TAG, "‚ùå Les rappels sont d√©sactiv√©s, arr√™t du service")
            stopSelf()
            return START_NOT_STICKY
        }

        try {
            // D√©marrer en tant que service de premier plan
            startForeground(NOTIFICATION_ID, createForegroundNotification())

            // Traiter les rappels de mani√®re asynchrone
            processReminders()

            // Programmer la prochaine ex√©cution
            scheduleNextReminder()

        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Erreur dans onStartCommand: ${e.message}", e)
            stopSelf()
            return START_NOT_STICKY
        }

        return START_STICKY
    }

    private fun createForegroundNotification() = NotificationCompat.Builder(this, NotificationChannelManager.FLOATING_WIDGET_CHANNEL_ID)
        .setContentTitle("MoneyWise Rappels")
        .setContentText("Surveillance des rappels en cours...")
        .setSmallIcon(R.drawable.ic_notifications)
        .setPriority(NotificationCompat.PRIORITY_LOW)
        .setOngoing(true)
        .setSilent(true)
        .build()

    private fun processReminders() {
        serviceScope.launch {
            try {
                Log.d(TAG, "üîç V√©rification des rappels...")

                var notificationsSent = 0

                // üî• CORRECTION: Utiliser la nouvelle m√©thode synchrone pour les emprunts
                val empruntsNonRembourses = withContext(Dispatchers.IO) {
                    try {
                        db.empruntDao().getEmpruntsNonRemboursesSync()
                    } catch (e: Exception) {
                        Log.e(TAG, "‚ùå Erreur lors de la r√©cup√©ration des emprunts: ${e.message}")
                        emptyList<Emprunt>()
                    }
                }

                if (empruntsNonRembourses.isNotEmpty()) {
                    val totalMontant = empruntsNonRembourses.sumOf { it.montant }

                    val message = if (empruntsNonRembourses.size == 1) {
                        "Vous avez un emprunt non rembours√© de ${empruntsNonRembourses[0].montant} MGA √† ${empruntsNonRembourses[0].nom_emprunte}."
                    } else {
                        "Vous avez ${empruntsNonRembourses.size} emprunts non rembours√©s totalisant ${String.format("%.0f", totalMontant)} MGA."
                    }

                    notificationHelper.sendNotification(
                        id = EMPRUNT_NOTIFICATION_ID,
                        title = "üí∞ Rappel d'emprunt",
                        message = message,
                        playSound = true
                    )
                    notificationsSent++
                    Log.d(TAG, "üì§ Notification d'emprunt envoy√©e")
                }

                // üî• CORRECTION: Utiliser la m√©thode existante pour les acquittements
                val acquittements = withContext(Dispatchers.IO) {
                    try {
                        db.acquittementDao().getAcquittementNonPayes()
                    } catch (e: Exception) {
                        Log.e(TAG, "‚ùå Erreur lors de la r√©cup√©ration des acquittements: ${e.message}")
                        emptyList<Acquittement>()
                    }
                }

                if (acquittements.isNotEmpty()) {
                    val totalMontant = acquittements.sumOf { it.montant }

                    val message = if (acquittements.size == 1) {
                        "Vous avez un acquittement de ${acquittements[0].montant} MGA pour ${acquittements[0].personne_acquittement}."
                    } else {
                        "Vous avez ${acquittements.size} acquittements totalisant ${String.format("%.0f", totalMontant)} MGA."
                    }

                    notificationHelper.sendNotification(
                        id = ACQUITTEMENT_NOTIFICATION_ID,
                        title = "üí∏ Rappel d'acquittement",
                        message = message,
                        playSound = true
                    )
                    notificationsSent++
                    Log.d(TAG, "üì§ Notification d'acquittement envoy√©e")
                }

                // üî• CORRECTION: Utiliser la m√©thode existante pour les projets
                val projetsEnCours = withContext(Dispatchers.IO) {
                    try {
                        db.projetDao().getProjetsEnCours()
                    } catch (e: Exception) {
                        Log.e(TAG, "‚ùå Erreur lors de la r√©cup√©ration des projets: ${e.message}")
                        emptyList<Projet>()
                    }
                }

                if (projetsEnCours.isNotEmpty()) {
                    val message = if (projetsEnCours.size == 1) {
                        "Vous avez un projet en cours: ${projetsEnCours[0].nom} (${projetsEnCours[0].progression}% compl√©t√©)."
                    } else {
                        "Vous avez ${projetsEnCours.size} projets en cours qui n√©cessitent votre attention."
                    }

                    notificationHelper.sendNotification(
                        id = PROJET_NOTIFICATION_ID,
                        title = "üìä Rappel de projet",
                        message = message,
                        playSound = true
                    )
                    notificationsSent++
                    Log.d(TAG, "üì§ Notification de projet envoy√©e")
                }

                // Gestion des cas sp√©ciaux
                val currentInterval = reminderManager.getCurrentInterval()
                val isTestInterval = reminderManager.isTestInterval(currentInterval)

                if (notificationsSent == 0) {
                    if (isTestInterval) {
                        // Pour les tests, toujours envoyer une notification
                        notificationHelper.sendNotification(
                            id = TEST_NOTIFICATION_ID,
                            title = "üß™ Test de notification",
                            message = "Ceci est une notification de test avec son de pi√®ce. Intervalle: ${reminderManager.formatInterval(currentInterval)}",
                            playSound = true
                        )
                        Log.d(TAG, "üì§ Notification de test envoy√©e")
                    } else {
                        // Pour les intervalles normaux, envoyer un rappel g√©n√©ral occasionnellement
                        if (shouldSendGeneralReminder()) {
                            notificationHelper.sendNotification(
                                id = GENERAL_NOTIFICATION_ID,
                                title = "‚úÖ MoneyWise",
                                message = "Tout va bien ! Aucun emprunt, acquittement ou projet n√©cessitant votre attention imm√©diate.",
                                playSound = false
                            )
                            Log.d(TAG, "üì§ Notification g√©n√©rale envoy√©e")
                        } else {
                            Log.d(TAG, "‚ÑπÔ∏è Aucun rappel n√©cessaire pour le moment")
                        }
                    }
                } else {
                    Log.d(TAG, "‚úÖ $notificationsSent notification(s) de rappel envoy√©e(s)")
                }

            } catch (e: Exception) {
                Log.e(TAG, "‚ùå Erreur lors du traitement des rappels: ${e.message}", e)
            }
        }
    }

    /**
     * D√©termine s'il faut envoyer un rappel g√©n√©ral
     * (par exemple, une fois par jour pour les intervalles longs)
     */
    private fun shouldSendGeneralReminder(): Boolean {
        val currentInterval = reminderManager.getCurrentInterval()

        // Envoyer un rappel g√©n√©ral seulement pour les intervalles de 12h ou plus
        return when (currentInterval) {
            TWELVE_HOURS,
            ONE_DAY -> {
                // Utiliser un syst√®me simple bas√© sur l'heure pour √©viter les rappels trop fr√©quents
                val currentHour = java.util.Calendar.getInstance().get(java.util.Calendar.HOUR_OF_DAY)
                currentHour == 9 || currentHour == 18 // 9h ou 18h
            }
            else -> false
        }
    }

    private fun scheduleNextReminder() {
        try {
            // V√©rifier si les rappels sont toujours activ√©s
            if (!reminderManager.areRemindersEnabled()) {
                Log.d(TAG, "‚ùå Les rappels ont √©t√© d√©sactiv√©s, pas de programmation")
                stopSelf()
                return
            }

            // Obtenir l'intervalle configur√©
            val interval = reminderManager.getCurrentInterval()

            // Cr√©er l'intent pour le service
            val intent = Intent(this, ReminderNotificationService::class.java)
            val pendingIntent = PendingIntent.getService(
                this,
                REQUEST_CODE,
                intent,
                PendingIntent.FLAG_UPDATE_CURRENT or PendingIntent.FLAG_IMMUTABLE
            )

            // Annuler toute alarme existante pour √©viter les doublons
            alarmManager.cancel(pendingIntent)

            // Programmer la prochaine ex√©cution
            val nextExecutionTime = SystemClock.elapsedRealtime() + interval

            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
                alarmManager.setExactAndAllowWhileIdle(
                    AlarmManager.ELAPSED_REALTIME_WAKEUP,
                    nextExecutionTime,
                    pendingIntent
                )
            } else {
                alarmManager.setExact(
                    AlarmManager.ELAPSED_REALTIME_WAKEUP,
                    nextExecutionTime,
                    pendingIntent
                )
            }

            val intervalText = reminderManager.formatInterval(interval)
            Log.d(TAG, "‚è∞ Prochaine ex√©cution programm√©e dans $intervalText")

            // Avertissement pour les intervalles de test
            if (reminderManager.isTestInterval(interval)) {
                Log.w(TAG, "üß™ ATTENTION: Mode test activ√© - Intervalle tr√®s court ($intervalText)")
            }

        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Erreur lors de la programmation du prochain rappel: ${e.message}", e)
            // En cas d'erreur, arr√™ter le service pour √©viter les boucles infinies
            stopSelf()
        }
    }

    override fun onDestroy() {
        super.onDestroy()
        Log.d(TAG, "üõë Service de rappel arr√™t√©")

        try {
            // Annuler toutes les coroutines en cours
            serviceScope.cancel()

            // Lib√©rer les ressources du NotificationHelper
            notificationHelper.release()

        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Erreur lors de la destruction du service: ${e.message}")
        }
    }

    override fun onTaskRemoved(rootIntent: Intent?) {
        super.onTaskRemoved(rootIntent)
        Log.d(TAG, "üì± Application ferm√©e, mais service continue")

        // Le service continue √† fonctionner m√™me si l'application est ferm√©e
        // C'est le comportement souhait√© pour les rappels
    }

    override fun onLowMemory() {
        super.onLowMemory()
        Log.w(TAG, "‚ö†Ô∏è M√©moire faible d√©tect√©e")

        // En cas de m√©moire faible, on peut lib√©rer certaines ressources
        // mais on garde le service actif
    }
}
